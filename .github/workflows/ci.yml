name: CI/CD Pipeline

on:
  push:
    branches: [ '**' ]  # Run on all branches
  pull_request:
    branches: [ main, master ]  # Accept PRs to main/master

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24.x'
        
    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
          
    - name: Download dependencies
      run: go mod download
      timeout-minutes: 3
      
    - name: Verify dependencies
      run: go mod verify
      timeout-minutes: 1
      
    - name: Run unit tests
      run: |
        echo "Running Go unit tests..."
        go test -v -timeout=5m -run="^Test[^C]" ./...
      timeout-minutes: 6
      
    - name: Validate integration test script
      run: |
        echo "Validating integration test script..."
        chmod +x ./integration-test.sh
        ./integration-test.sh --help || echo "Integration test script ready"
      timeout-minutes: 1
      
    - name: Run integration tests
      run: |
        echo "Building Pi-hole Network Analyzer..."
        go build -o pihole-network-analyzer .
        echo "Running comprehensive integration test suite..."
        ./pihole-network-analyzer --test
      timeout-minutes: 8
      
    - name: Run performance benchmarks
      run: |
        echo "Running performance benchmarks..."
        go test -bench=. -run=Benchmark -timeout=3m
      timeout-minutes: 4
        
    - name: Check code formatting
      run: |
        if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
          echo "Code formatting issues found:"
          gofmt -s -l .
          exit 1
        fi
      timeout-minutes: 1
        
    - name: Run go vet
      run: go vet ./...
      timeout-minutes: 2

  validate-integration-tests:
    name: Validate Integration Test Framework
    runs-on: ubuntu-latest
    timeout-minutes: 8
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24.x'
        
    - name: Test integration script functionality
      run: |
        echo "üß™ Testing integration test script framework..."
        chmod +x ./integration-test.sh
        
        # Test script help and validation
        echo "Testing script validation..."
        if ./integration-test.sh 2>&1 | grep -q "Validating test environment"; then
          echo "‚úÖ Script validation working"
        else
          echo "‚ùå Script validation failed"
          exit 1
        fi
      timeout-minutes: 3
      
    - name: Verify test scenarios are supported
      run: |
        echo "üîç Verifying all test scenarios are supported..."
        scenarios=("csv-analysis" "pihole-db" "colorized-output" "all-features")
        
        for scenario in "${scenarios[@]}"; do
          echo "Checking scenario: $scenario"
          # Test that scenario is recognized (will fail gracefully without binary)
          if ./integration-test.sh "$scenario" 2>&1 | grep -q "Binary.*not found\|Validating test environment"; then
            echo "‚úÖ Scenario '$scenario' is supported"
          else
            echo "‚ùå Scenario '$scenario' is not supported"
            exit 1
          fi
        done
      timeout-minutes: 4

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [test, validate-integration-tests]
    timeout-minutes: 15
    
    strategy:
      matrix:
        go-version: ['1.24.x']
        test-scenario: ['csv-analysis', 'pihole-db', 'colorized-output', 'all-features']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go ${{ matrix.go-version }}
      uses: actions/setup-go@v5
      with:
        go-version: ${{ matrix.go-version }}
        
    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ matrix.go-version }}-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-${{ matrix.go-version }}-
          ${{ runner.os }}-go-
          
    - name: Download dependencies
      run: go mod download
      timeout-minutes: 3
      
    - name: Build application
      run: |
        echo "Building for integration tests with Go ${{ matrix.go-version }}..."
        go build -race -o pihole-network-analyzer .
        chmod +x pihole-network-analyzer
      timeout-minutes: 3
      
    - name: Run scenario-specific integration tests
      run: |
        echo "üß™ Running integration tests for scenario: ${{ matrix.test-scenario }}"
        chmod +x ./integration-test.sh
        # Set CI environment variable for integration tests
        CI=true ./integration-test.sh "${{ matrix.test-scenario }}"
      timeout-minutes: 10
      
    - name: Test cross-platform compatibility
      run: |
        echo "Testing cross-platform builds..."
        GOOS=windows GOARCH=amd64 go build -o test-windows.exe .
        GOOS=darwin GOARCH=amd64 go build -o test-darwin .
        GOOS=linux GOARCH=arm64 go build -o test-linux-arm64 .
        echo "‚úÖ Cross-platform compatibility verified"
        rm -f test-windows.exe test-darwin test-linux-arm64
      timeout-minutes: 4
      
    - name: Integration test report
      run: |
        echo "üìä Integration Test Report - ${{ matrix.test-scenario }} on Go ${{ matrix.go-version }}"
        echo "‚úÖ Scenario: ${{ matrix.test-scenario }}"
        echo "‚úÖ Go Version: ${{ matrix.go-version }}"
        echo "‚úÖ Platform: Ubuntu Latest"
        echo "‚úÖ All integration tests passed!"
      if: success()
      
    - name: Upload integration test artifacts
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: integration-test-failure-${{ matrix.go-version }}-${{ matrix.test-scenario }}
        path: |
          test_data/
          *.log
          core
        retention-days: 7

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: [test, integration-test]
    timeout-minutes: 10
    continue-on-error: true
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24.x'
        
    - name: Run govulncheck
      run: |
        echo "Installing govulncheck..."
        go install golang.org/x/vuln/cmd/govulncheck@latest
        echo "Running vulnerability check..."
        govulncheck ./... || echo "‚ö†Ô∏è Vulnerabilities found but continuing build"
      timeout-minutes: 5

  build-check:
    name: Build Check (Feature Branches)
    runs-on: ubuntu-latest
    needs: [test, integration-test]
    timeout-minutes: 10
    # Only run build check on non-main/master branches
    if: github.ref != 'refs/heads/main' && github.ref != 'refs/heads/master'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24.x'
        
    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
          
    - name: Download dependencies
      run: go mod download
      timeout-minutes: 3
      
    - name: Build verification (no artifacts)
      run: |
        echo "üîç Verifying build compatibility for feature branch..."
        echo "Building for Linux AMD64..."
        GOOS=linux GOARCH=amd64 go build -o /tmp/test-build .
        echo "‚úÖ Build verification successful - ready for merge!"
        rm -f /tmp/test-build
      timeout-minutes: 5

  build:
    name: Build and Release
    runs-on: ubuntu-latest
    needs: [test, integration-test, security]
    timeout-minutes: 15
    # Only run builds on main/master branch
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24.x'
        
    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
          
    - name: Download dependencies
      run: go mod download
      timeout-minutes: 3
      
    - name: Generate version info
      id: version
      run: |
        # Generate version based on commit hash and date
        VERSION="v$(date +%Y.%m.%d)-$(git rev-parse --short HEAD)"
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "üè∑Ô∏è Version: $VERSION"
      
    - name: Build multi-platform binaries
      run: |
        echo "üöÄ Building production binaries for version ${{ steps.version.outputs.version }}..."
        VERSION="${{ steps.version.outputs.version }}"
        
        # Linux builds
        echo "Building Linux AMD64..."
        GOOS=linux GOARCH=amd64 go build -ldflags "-X main.Version=$VERSION" -o pihole-network-analyzer-linux-amd64 .
        echo "Building Linux ARM64..."
        GOOS=linux GOARCH=arm64 go build -ldflags "-X main.Version=$VERSION" -o pihole-network-analyzer-linux-arm64 .
        
        # Windows builds
        echo "Building Windows AMD64..."
        GOOS=windows GOARCH=amd64 go build -ldflags "-X main.Version=$VERSION" -o pihole-network-analyzer-windows-amd64.exe .
        echo "Building Windows ARM64..."
        GOOS=windows GOARCH=arm64 go build -ldflags "-X main.Version=$VERSION" -o pihole-network-analyzer-windows-arm64.exe .
        
        # macOS builds
        echo "Building macOS AMD64..."
        GOOS=darwin GOARCH=amd64 go build -ldflags "-X main.Version=$VERSION" -o pihole-network-analyzer-darwin-amd64 .
        echo "Building macOS ARM64..."
        GOOS=darwin GOARCH=arm64 go build -ldflags "-X main.Version=$VERSION" -o pihole-network-analyzer-darwin-arm64 .
        
        echo "‚úÖ All platform builds completed successfully!"
        
        # Create checksums
        echo "üìã Generating checksums..."
        sha256sum pihole-network-analyzer-* > checksums.txt
        
        # List all files
        echo "üì¶ Build artifacts:"
        ls -la pihole-network-analyzer-* checksums.txt
      timeout-minutes: 8
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: pihole-network-analyzer-${{ steps.version.outputs.version }}
        path: |
          pihole-network-analyzer-linux-*
          pihole-network-analyzer-windows-*.exe
          pihole-network-analyzer-darwin-*
          checksums.txt
        retention-days: 90
        
    - name: Create Release (if tag)
      uses: actions/create-release@v1
      if: startsWith(github.ref, 'refs/tags/')
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false
